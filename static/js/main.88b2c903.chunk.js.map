{"version":3,"sources":["Login.jsx","Register.jsx","Forms.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","props","text","form","className","formState","type","autoComplete","id","name","onClick","updateForm","Register","Forms","useState","login","register","showComponent","setShowComponent","setFormState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PA4CeA,G,MA1CH,SAACC,GAAW,IAEfC,EAAQD,EAAME,KAAdD,KAMP,OACE,oCACE,0BAAME,UAAWH,EAAMI,UAAY,cAAgB,IACjD,yBAAKD,UAAU,QACb,2BAAOA,UAAU,cAAjB,iBACA,2BACEE,KAAK,QACLF,UAAU,eACVG,aAAa,MACbC,GAAG,QACHC,KAAK,WAGT,yBAAKL,UAAU,QACb,2BAAOA,UAAU,cAAjB,YACA,2BACEE,KAAK,WACLF,UAAU,eACVG,aAAa,MACbC,GAAG,WACHC,KAAK,cAGT,yBAAKL,UAAU,aACb,4BAAQE,KAAK,SAASF,UAAU,mBAAhC,UAIF,yBAAKA,UAAU,MAAMM,QAhCR,WACbT,EAAMU,eA+BqCT,OCgBpCU,EApDA,SAACX,GAAW,IAElBC,EAAQD,EAAME,KAAdD,KAMP,OACE,oCACE,0BAAME,UAAWH,EAAMI,UAAY,cAAgB,IACjD,yBAAKD,UAAU,QACb,2BAAOA,UAAU,cAAjB,QACA,2BACEE,KAAK,OACLF,UAAU,eACVG,aAAa,MACbC,GAAG,OACHC,KAAK,UAGT,yBAAKL,UAAU,QACb,2BAAOA,UAAU,cAAjB,iBACA,2BACEE,KAAK,QACLF,UAAU,eACVG,aAAa,MACbC,GAAG,QACHC,KAAK,WAGT,yBAAKL,UAAU,QACb,2BAAOA,UAAU,cAAjB,YACA,2BACEE,KAAK,WACLF,UAAU,eACVG,aAAa,MACbC,GAAG,WACHC,KAAK,cAGT,yBAAKL,UAAU,aACb,4BAAQE,KAAK,SAASF,UAAU,mBAAhC,aAIF,yBAAKA,UAAU,MAAMM,QA1CR,WACbT,EAAMU,eAyCqCT,MCRpCW,EAnCH,WAAO,IAAD,EAE0BC,mBAAS,CAC7CC,OAAO,EACPC,UAAU,EACVd,KAAM,UALI,mBAETe,EAFS,KAEMC,EAFN,OAOoBJ,oBAAS,GAP7B,mBAOPT,EAPO,KAOIc,EAPJ,KASVR,EAAa,WACbO,EAAiB,CACbH,OAAQE,EAAcF,MACtBC,UAAWC,EAAcD,SACzBd,KAA6B,UAAvBe,EAAcf,KAAmB,WAAa,UAExDiB,GAAa,IAGnB,OACE,oCACE,yBAAKf,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,gBACZa,EAAcF,QAAUE,EAAcD,UAAY,kBAAC,EAAD,CAAOb,KAAMc,EAAeN,WAAYA,EAAYN,UAAWA,KAChHY,EAAcF,OAASE,EAAcD,UAAY,kBAAC,EAAD,CAAUb,KAAMc,EAAeN,WAAYA,EAAYN,UAAWA,UCnBpHe,G,MARL,WACR,OACE,oCACE,kBAAC,EAAD,SCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.88b2c903.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nlet Login = (props) => {\r\n\r\n    let {text} = props.form;\r\n\r\n    let updateForm = () => {\r\n        props.updateForm();\r\n    };\r\n\r\n  return (\r\n    <>\r\n      <form className={props.formState ? 'myAnimation' : \"\"}>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Email address</label>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            autoComplete=\"off\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"off\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n          />\r\n        </div>\r\n        <div className=\"submitbtn\">\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Login\r\n          </button>\r\n        </div>\r\n        <div className=\"txt\" onClick={updateForm}>{text}</div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nlet Register = (props) => {\r\n\r\n    let {text} = props.form;\r\n\r\n    let updateForm = () => {\r\n        props.updateForm();\r\n    };\r\n\r\n  return (\r\n    <>\r\n      <form className={props.formState ? 'myAnimation' : \"\"}>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            autoComplete=\"off\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Email address</label>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            autoComplete=\"off\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            autoComplete=\"off\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n          />\r\n        </div>\r\n        <div className=\"submitbtn\">\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Register\r\n          </button>\r\n        </div>\r\n        <div className=\"txt\" onClick={updateForm}>{text}</div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, {useState} from \"react\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport Login from \"./Login\";\r\nimport Register from \"./Register\";\r\n\r\nlet Forms = () => {\r\n    \r\n    let [showComponent, setShowComponent] = useState({\r\n        login: false,\r\n        register: true,\r\n        text: 'Login'\r\n    });\r\n    const [formState, setFormState] = useState(false);\r\n\r\n    let updateForm = () => {\r\n        setShowComponent({\r\n            login: !showComponent.login,\r\n            register: !showComponent.register,\r\n            text: showComponent.text === 'Login' ? 'Register' : 'Login'\r\n        });\r\n        setFormState(true);\r\n    }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row forms\">\r\n          <div className=\"col-md-6 left\"></div>\r\n          <div className=\"col-md-6 right\">\r\n            <div className=\"rightSection\">\r\n              {showComponent.login && !showComponent.register && <Login form={showComponent} updateForm={updateForm} formState={formState} />}\r\n              {!showComponent.login && showComponent.register && <Register form={showComponent} updateForm={updateForm} formState={formState} />}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Forms;\r\n","import React from 'react';\nimport Forms from './Forms';\nimport './App.css';\n\nlet App = () => {\n  return (\n    <>\n      <Forms />\n    </>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}